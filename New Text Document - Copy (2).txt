# Define infinity for initialization
INF = float('inf')

def bellman_ford(graph, vertices, edges, source):
    # Initialize distances from source to all vertices as infinity
    distance = [INF] * vertices
    # Distance from source to itself is 0
    distance[source] = 0

    # Relax edges (vertices - 1) times
    for _ in range(vertices - 1):
        for u, v, w in graph:
            if distance[u] != INF and distance[u] + w < distance[v]:
                distance[v] = distance[u] + w

    # Check for negative weight cycles
    for u, v, w in graph:
        if distance[u] != INF and distance[u] + w < distance[v]:
            print("Negative cycle detected")
            return

    # Print shortest distances from source
    print("Vertex   Distance from Source")
    for i in range(vertices):
        print(f"{i}\t\t{distance[i]}")

# Define number of vertices and edges
vertices = 6
edges = 8

# Define graph as a list of edges (source, destination, weight)
graph = [
    (0, 1, 5), (0, 2, 7), (1, 2, 3),
    (1, 3, 4), (1, 4, 6), (3, 4, -1),
    (3, 5, 2), (4, 5, -3)
]

# Call Bellman-Ford function with source vertex as 0
bellman_ford(graph, vertices, edges, 0)